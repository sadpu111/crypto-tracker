[{"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/index.tsx":"1","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/theme.ts":"2","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/App.tsx":"3","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/Router.tsx":"4","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Coin.tsx":"5","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Chart.tsx":"6","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Coins.tsx":"7","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Price.tsx":"8","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Api.ts":"9"},{"size":396,"mtime":1666874904399,"results":"10","hashOfConfig":"11"},{"size":463,"mtime":1666874382553,"results":"12","hashOfConfig":"11"},{"size":2726,"mtime":1666874837267,"results":"13","hashOfConfig":"11"},{"size":747,"mtime":1666873707273,"results":"14","hashOfConfig":"11"},{"size":7183,"mtime":1666873707273,"results":"15","hashOfConfig":"11"},{"size":3526,"mtime":1666873707273,"results":"16","hashOfConfig":"11"},{"size":4084,"mtime":1666873707273,"results":"17","hashOfConfig":"11"},{"size":3000,"mtime":1666873707273,"results":"18","hashOfConfig":"11"},{"size":904,"mtime":1666873707273,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fpssrw",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/index.tsx",[],[],"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/theme.ts",[],[],[],"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/App.tsx",[],[],"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/Router.tsx",[],[],"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Coin.tsx",["50","51","52"],[],"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport {useParams, useLocation, Outlet, Link, useMatch} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"./Api\";\nimport {Helmet} from \"react-helmet\"\n\n\n\nconst HomeBtn = styled.button`\n  width: 60px;\n  height: 30px;\n  border-radius: 10px;\n`;\n\nconst Container = styled.div`\n  padding: 0px 10px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\nconst Header = styled.header`\n  height: 10vp;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\nconst Title = styled.h1`\n  margin: 20px;\n  color: ${(props) => props.theme.accentColor};\n  font-size: 45px;\n`\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 20px 20px;\n  border-radius: 10px;\n  margin-bottom: 20px;\n`;\nconst OverviewItem = styled.div` \n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  line-height: 20px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{isActive : boolean}>` // <{isActive : boolean}> => isActive라는 prop을 추가하며 이는 boolean 타입이다. 이를 하단의 priveMatch와 cahrtMatch로 전달할 수 있다.\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 12px 0px;\n  border-radius: 10px;\n  color: ${props => props.isActive ? props.theme.accentColor : props.theme.textColor}; //위에 isActive prop을 추가하여 하단의 <Tab> 컴포넌트에서 값(isActive={chartMatch !== null})을 입력받는다. 입력받는 값이 true이면 theme의 accentColor을, 아니라면 textColor을 적용한다.\n  a {\n    display: block;\n  }\n  &:hover { // event 추가문법.\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\ninterface LocationState { \n  state: {\n    id: string;\n    name: string;\n    symbol: string;\n    rank: number;\n    is_new: boolean;\n    is_active: boolean;\n    type: string;\n  }\n};\n\n \n\ninterface InfoData { \n  id:string ;\n  name: string ;\n  symbol: string ;\n  rank: number ;\n  is_new: boolean ;\n  is_active: boolean ;\n  type: string ;\n  logo: string ;\n  description: string ;\n  message: string ;\n  open_source: boolean ;\n  started_at: string ;\n  development_status: string ;\n  hardware_wallet: boolean ;\n  proof_type: string ;\n  org_structure: string ; \n  hash_algorithm: string ;\n  links: object ;\n  links_extended: object ;\n  whitepaper: object ;\n  first_data_at: string ;\n  last_data_at: string ;\n}\n \nexport interface PriceData {\n  id:string ;\n  name: string ;\n  symbol: string ;\n  rank: number ;\n  circulating_supply: number ;\n  total_supply: number ;\n  max_supply: number ;\n  beta_value: number ;\n  first_data_at: string ;\n  last_updated: string ;\n  quotes: {\n    USD: {\n      price:number ;\n      volume_24h:number ;\n      volume_24h_change_24h:number ;\n      market_cap:number ;\n      market_cap_change_24h:number ;\n      percent_change_15m:number ;\n      percent_change_30m:number ;\n      percent_change_1h:number ;\n      percent_change_6h:number ;\n      percent_change_12h:number ;\n      percent_change_24h:number ;\n      percent_change_7d:number ;\n      percent_change_30d:number ;\n      percent_change_1y:number ;\n      ath_price:number ;\n      ath_date:string ;\n      percent_from_price_ath:number ;\n    }\n  } ;\n}\n\nfunction Coin () {\n  const {coinId} = useParams(); \n  const {state} = useLocation() as LocationState;\n  const priceMatch = useMatch(\"/:coinId/price\"); // useMatch hook. react-router-dom v6 이전에는 useRouteMatch. 특정 url이 일치하는지를 보여줌. 일치하면 object를, 일치하지 않으면 null.\n  const chartMatch = useMatch(\"/:coinId/chart\") \n  /* const [loading, setLoading] = useState(true); \n  const [info, setInfo] = useState<InfoData>();\n  const [priceInfo, setPriceInfo] = useState<PriceData>();\n  useEffect(() => {   \n    (async () => {\n      const infoData = await (await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)).json();\n      const priceData = await (await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)).json();\n      setInfo(infoData);\n      setPriceInfo(priceData);\n      setLoading(false); \n    })();\n  }, [coinId]); */\n  const {isLoading: infoLoading, data: infoData} = useQuery<InfoData>([\"info\", coinId], () => fetchCoinInfo(coinId!)) // coinId는 useParams()로 string || undefined라 오류가 발생하는데, 뒤에 !를 붙여주면 이는 확장 할당 어션셜로 값이 무조건 할당되어있다고 컴파일러에게 전달해 값이 없어도 변수를 사용할 수 있게 한다.\n  const {isLoading: tickersLoading, data: tickersData} = useQuery<PriceData>([\"ticker\", coinId], () => fetchCoinTickers(coinId!), {refetchInterval: 5000}); // {isLoading: tickersLoading, data: tickersData} => 그대로 쓰면 서로 겹치니깐 재명명하는 작업. 3번째 argument는 선택적인 것으로, refetch interval을 설정할 수 있다. 단위는 밀리세컨드로 3000은 3초 간격. 즉, 3초마다 값을 새로 읽어온다.\n  const loading = infoLoading || tickersLoading;\n  return <Container>\n  <Helmet>\n    <title>{state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}</title>\n  </Helmet>\n  <Header>\n    <Title>{state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}</Title>\n    <HomeBtn>\n      <Link to=\"/\">Home</Link>\n    </HomeBtn>\n  </Header>\n  {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price</span>\n              <span>${tickersData?.quotes.USD.price.toFixed(3)}</span>\n            </OverviewItem>\n          </Overview>\n          <Overview>\n            <Description>{infoData?.description}</Description>\n          </Overview>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData ?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null }>\n              <Link to={`/${coinId}/price`}>price</Link>\n            </Tab>\n          </Tabs>\n          <Outlet context={{coinId, tickersData}} />\n        </>\n      )}\n  </Container>;\n} \n\nexport default Coin","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Chart.tsx",[],[],"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Coins.tsx",["53","54"],[],"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\"\nimport { fetchCoins } from \"./Api\";\nimport { Helmet } from \"react-helmet\";\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right:20px;\n`;\n\nconst Container = styled.div`\n  padding: 0px 10px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 10vp;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: white;\n  color: ${(props) => props.theme.bgColor};\n  margin-bottom: 10px;\n  border-radius: 10px;\n  a { // Coin 컴포넌트 내의 anchor는 아래와 같은 스타일 적용\n    display: flex; \n    align-items: center;\n    transition: color 0.2s ease-in; // 색이 전환(변화)되는데 0.2초 지연 및 ease-in 효과\n    padding: 15px;\n  }\n  &:hover { // event 추가문법.\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 20px;\n  color: ${(props) => props.theme.accentColor};\n  font-size: 45px;\n`\n// typescript에 데이터의 shape을 알려주기 위한 interface.\ninterface ICoin {  \n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\n\n// coin 컴포넌트를 클릭하면 <Link>태그를 통해 {`/${coin.id}`}라는 주소로 이동 -> Routers.tsx의 Router 컴포넌트에서 /:coinId 경로는 Coin.tsx의 Coin 컴포넌트를 랜더링하는 것으로 정의. 정리하면, Coin.tsx의 Coin 컴포넌트의 coinId와 Router.tsx의 Router 컴포넌트의 coinId는 useParams()로 연결되어있고, 이 coinId 자리에 Coins.tsx의 coin array의 id값을 전달하는 것.\nfunction Coins () {\n/*   const [loading, setLoding] = useState(true);\n  const [coins, setCoins] = useState<ICoin[]>([]); // <ICoin[]>를 추가하여 coins state가 해당 interface로 구성된 array라는 정보 전달. 이를 통해 하단의 coin.id, coin.name에서 오류 발생X. coins 전체는 배열, 각 coin의 데이터는 객체.\n  useEffect(() => {\n    // useEffect 안에 함수 만들 때 팁. useEffect(() => {()()}). 첫 번째 양괄호 안에 함수를 입력하면 바로 실행된다.\n      (async() => {\n        const response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\n        const json = await response.json();\n        setCoins(json.slice(0, 100));\n        setLoding(false);\n      })();\n    }, []);  // react query를 사용하면서 api.ts에 fetchCoins 함수로 대체*/\n  const {isLoading, data} = useQuery<ICoin[]>([\"allCoins\"], fetchCoins); // useQuery를 통해 fetcher함수(여기서는 fetchCoins)를 전달인자로 받아 실행하는데, isLoading으로 읽어오는 중인지 여부를 판단하고, 로딩이 끝나면 해당 데이터(json)을 data로 받아온다. 얘도 마찬가지로 typescript에 데이터의 타입을 전달하기 위해 ICoin이라는 interface 적용. react qeury는 cahce에 로딩된 데이터를 저장하여 한번 로딩하면 저장했던 cache애서 바로 불러온다.\n  return (\n    <Container>\n      <Helmet>\n        <title>Crypto Currency</title>\n       </Helmet>\n      <Header>\n        <Title>Crypto Currency</Title>\n      </Header>\n      {isLoading ? <Loader>Loading...</Loader> : \n        <CoinsList>\n        {data?.slice(0, 100).map((coin) => (\n        <Coin key={coin.id}>\n          <Link to={`/${coin.id}/chart`} state={coin}> \n            <Img src={`https://coinicons-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}></Img>\n            {coin.name} &rarr;</Link> \n        </Coin>))}\n      </CoinsList>}\n    </Container>\n  )\n}\n// <Link state={} /> => 브라우저가 이미 갖고 있는 데이터를 다른 화면으로 전달. 이를 통해 api를 읽는 시간동안 화면에 전달받은 데이터를 표시할 수 있다. 로딩화면 생략 가능.\n\nexport default Coins","/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Price.tsx",[],[],"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Api.ts",[],[],{"ruleId":"55","severity":1,"message":"56","line":1,"column":10,"nodeType":"57","messageId":"58","endLine":1,"endColumn":19},{"ruleId":"55","severity":1,"message":"59","line":1,"column":21,"nodeType":"57","messageId":"58","endLine":1,"endColumn":29},{"ruleId":"60","severity":1,"message":"61","line":216,"column":22,"nodeType":"62","messageId":"63","endLine":216,"endColumn":46,"fix":"64"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":10,"nodeType":"57","messageId":"58","endLine":1,"endColumn":19},{"ruleId":"55","severity":1,"message":"59","line":1,"column":21,"nodeType":"57","messageId":"58","endLine":1,"endColumn":29},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property max_supply.","MemberExpression","unexpectedWhitespace",{"range":"65","text":"66"},[6262,6265],"?."]