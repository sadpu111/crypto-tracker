{"ast":null,"code":"var _jsxFileName = \"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./Api\";\nimport { useOutletContext } from \"react-router-dom\";\nimport ApexCahrt from \"react-apexcharts\"; // 공식문서에서는 Chart를 import하라고 하지만 Chart 컴포넌트와 겹치기 떄문에 ApexChart로 improt \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// useQuery<IHistoricalData[]> => data는 IHistoricalData interface의 배열\nfunction Chart() {\n  _s();\n\n  const {\n    coinId\n  } = useOutletContext();\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading Chart...\" : /*#__PURE__*/_jsxDEV(ApexCahrt, {\n      type: \"candlestick\",\n      series: [{\n        name: \"Price\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.close) // data prop은 number 타입을 받아야되는데, 못읽어올 경우 undefined가 되는 문제로 오류 발생. 그래서 후단의 as number[] 로 강제 타입 변형.\n\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          height: 500,\n          width: 500,\n          toolbar: {\n            show: false\n          },\n          background: \"transparent\"\n        },\n        yaxis: {\n          title: {\n            text: \"Price($)\"\n          }\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: data === null || data === void 0 ? void 0 : data.map(date => new Date(Number(date.time_close) * 1000).toISOString()) // 지금 활용하는 API의 time_close는 초단위 & string 타입이므로, 먼저 Number로 형변환 후 날짜로 변환.\n\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 3\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"#0be881\"],\n            stops: [1, 100]\n          }\n        },\n        colors: [\"#0fbcf9\"],\n        tooltip: {\n          y: {\n            formatter: value => `$${value.toFixed(1)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Chart, \"tsPjlIvSU9S1FNm2xWh+pMDOlxE=\", false, function () {\n  return [useOutletContext, useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["useQuery","fetchCoinHistory","useOutletContext","ApexCahrt","Chart","coinId","isLoading","data","name","map","price","close","theme","mode","chart","height","width","toolbar","show","background","yaxis","title","text","xaxis","type","categories","date","Date","Number","time_close","toISOString","stroke","curve","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed"],"sources":["/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Chart.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./Api\";\nimport {useOutletContext} from \"react-router-dom\"\nimport ApexCahrt from \"react-apexcharts\"; // 공식문서에서는 Chart를 import하라고 하지만 Chart 컴포넌트와 겹치기 떄문에 ApexChart로 improt \n\n\ninterface ChartProps {\n  coinId: string;\n}\n\ninterface IHistoricalData {\n    time_open: string;\n    time_close: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    volume: number;\n    market_cap: number;\n}\n// useQuery<IHistoricalData[]> => data는 IHistoricalData interface의 배열\nfunction Chart() {\n  const {coinId} = useOutletContext<ChartProps>()\n  const {isLoading, data} = useQuery<IHistoricalData[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId))\n  return <div>{isLoading ? \"Loading Chart...\" : \n    <ApexCahrt \n    type=\"candlestick\" \n    series={[\n      {\n        name: \"Price\",\n        data: data?.map(price => price.close) as number[], // data prop은 number 타입을 받아야되는데, 못읽어올 경우 undefined가 되는 문제로 오류 발생. 그래서 후단의 as number[] 로 강제 타입 변형.\n      },\n    ]}\n    options={{\n      \n      theme: {\n        mode: \"dark\",\n      },\n      chart: {\n        height: 500,\n        width: 500,\n        toolbar: {\n          show: false,\n        },\n        background: \"transparent\",\n      },\n      yaxis: {\n        title: {\n          text: \"Price($)\"\n        }\n      },\n      \n      xaxis: {\n        \n         type: \"datetime\",\n         categories: data?.map(date => new Date(Number(date.time_close) * 1000).toISOString()) // 지금 활용하는 API의 time_close는 초단위 & string 타입이므로, 먼저 Number로 형변환 후 날짜로 변환.\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 3,\n      },\n      fill : {\n        type: \"gradient\", gradient: {\n          gradientToColors: [\"#0be881\"],\n          stops: [1, 100]\n        }\n      },\n      colors: [\"#0fbcf9\"],\n      tooltip: {\n        y: {\n          formatter: (value) => `$${value.toFixed(1)}`\n        }\n      }\n    }}>\n    </ApexCahrt>\n    \n    \n  }\n  </div>\n}\n\nexport default Chart;"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,OAAjC;AACA,SAAQC,gBAAR,QAA+B,kBAA/B;AACA,OAAOC,SAAP,MAAsB,kBAAtB,C,CAA0C;;;;AAiB1C;AACA,SAASC,KAAT,GAAiB;EAAA;;EACf,MAAM;IAACC;EAAD,IAAWH,gBAAgB,EAAjC;EACA,MAAM;IAACI,SAAD;IAAYC;EAAZ,IAAoBP,QAAQ,CAAoB,CAAC,OAAD,EAAUK,MAAV,CAApB,EAAuC,MAAMJ,gBAAgB,CAACI,MAAD,CAA7D,CAAlC;EACA,oBAAO;IAAA,UAAMC,SAAS,GAAG,kBAAH,gBACpB,QAAC,SAAD;MACA,IAAI,EAAC,aADL;MAEA,MAAM,EAAE,CACN;QACEE,IAAI,EAAE,OADR;QAEED,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAUC,KAAK,IAAIA,KAAK,CAACC,KAAzB,CAFR,CAEqD;;MAFrD,CADM,CAFR;MAQA,OAAO,EAAE;QAEPC,KAAK,EAAE;UACLC,IAAI,EAAE;QADD,CAFA;QAKPC,KAAK,EAAE;UACLC,MAAM,EAAE,GADH;UAELC,KAAK,EAAE,GAFF;UAGLC,OAAO,EAAE;YACPC,IAAI,EAAE;UADC,CAHJ;UAMLC,UAAU,EAAE;QANP,CALA;QAaPC,KAAK,EAAE;UACLC,KAAK,EAAE;YACLC,IAAI,EAAE;UADD;QADF,CAbA;QAmBPC,KAAK,EAAE;UAEJC,IAAI,EAAE,UAFF;UAGJC,UAAU,EAAElB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAUiB,IAAI,IAAI,IAAIC,IAAJ,CAASC,MAAM,CAACF,IAAI,CAACG,UAAN,CAAN,GAA0B,IAAnC,EAAyCC,WAAzC,EAAlB,CAHR,CAGkF;;QAHlF,CAnBA;QAwBPC,MAAM,EAAE;UACNC,KAAK,EAAE,QADD;UAENhB,KAAK,EAAE;QAFD,CAxBD;QA4BPiB,IAAI,EAAG;UACLT,IAAI,EAAE,UADD;UACaU,QAAQ,EAAE;YAC1BC,gBAAgB,EAAE,CAAC,SAAD,CADQ;YAE1BC,KAAK,EAAE,CAAC,CAAD,EAAI,GAAJ;UAFmB;QADvB,CA5BA;QAkCPC,MAAM,EAAE,CAAC,SAAD,CAlCD;QAmCPC,OAAO,EAAE;UACPC,CAAC,EAAE;YACDC,SAAS,EAAGC,KAAD,IAAY,IAAGA,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;UAD1C;QADI;MAnCF;IART;MAAA;MAAA;MAAA;IAAA;EADK;IAAA;IAAA;IAAA;EAAA,QAAP;AAuDD;;GA1DQtC,K;UACUF,gB,EACSF,Q;;;KAFnBI,K;AA4DT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}